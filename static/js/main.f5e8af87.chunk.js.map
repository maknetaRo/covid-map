{"version":3,"sources":["components/Map.js","components/Header.js","components/modules/GlobalSectionUI.js","components/CountryList.js","useFetch.js","App.js","reportWebVitals.js","index.js"],"names":["redIcon","L","iconUrl","shadowUrl","iconSize","iconAnchor","popupAnchor","shadowSize","Map","props","className","MapContainer","center","zoom","scrollWheelZoom","TileLayer","attribution","url","countries","features","map","place","coordinates","geometry","properties","country","cases","deaths","recovered","todayCases","todayDeaths","todayRecovered","updated","date","Date","Marker","icon","position","Popup","toLocaleDateString","StyledHeader","styled","section","article","ListElem","li","Link","a","Header","href","CountryList","useFetch","urls","useState","setCountries","global","setGlobal","dataHistorical","dataVaccine","loading","setLoading","error","setError","useEffect","links","console","log","Promise","all","fetch","res","r","json","data","geoJson","type","countryInfo","lat","lng","long","message","fetchData","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5e8af87.chunk.js","sourcesContent":["import React from 'react';\nimport { MapContainer, TileLayer, Marker, Popup } from 'react-leaflet';\nimport \"leaflet/dist/leaflet.css\";\nimport * as L from 'leaflet';\n\n\n\nconst redIcon = new L.Icon({\n  iconUrl: 'https://raw.githubusercontent.com/pointhi/leaflet-color-markers/master/img/marker-icon-red.png',\n  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/0.7.7/images/marker-shadow.png',\n  iconSize: [25, 41],\n  iconAnchor: [12, 41],\n  popupAnchor: [1, -34],\n  shadowSize: [41, 41]\n});\n\nconst Map = (props) => {\n    const center_position = [31.262218, 34.801472]\n    const zoom = 1.5\n   \n\n    \n    return (     \n      <section className=\"map\">\n      <MapContainer className=\"map\" \n      center={center_position} zoom={zoom} scrollWheelZoom={true}      \n      >\n      <TileLayer\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      />\n {props.countries ? props.countries.features.map(place => {\n        const { coordinates } = place.geometry        \n        const { country, cases, deaths, recovered, todayCases, todayDeaths, todayRecovered, updated } = place.properties;\n\n        let date = new Date(updated)\n\n        return (\n        <Marker icon={redIcon} position={coordinates} key={place.properties.country}>\n        <Popup  >\n          <h2>{country}</h2>\n          <p><strong>Cases:</strong> {cases} | <strong>Cases Today:</strong> {todayCases}</p> \n          <p><strong>Deaths:</strong> {deaths} | <strong>Death Today:</strong> {todayDeaths}</p>\n          <p><strong>Recovered:</strong> {recovered} | <strong>Recovered Today:</strong> {todayRecovered}</p>\n          <p><strong>Last Update:</strong> {date.toLocaleDateString()}</p>\n        </Popup>\n        </Marker>\n        )\n      })\n      : null} \n       \n     </MapContainer>\n     </section>\n     \n        \n    )\n}\n\nexport default Map\n","import React from 'react'\nimport styled from  'styled-components'\n\nconst StyledHeader = styled.section`\n    display: flex;\n    justify-content: space-around;\n    align-items: center;\n    width: 100%;\n    height: 80px;\n    line-height: 80px;\n    background-color:#351F39; \n    box-shadow: 2px 2px 2px 2px rgba(0, 0, 0, 0.3);\n    z-index: 3;\n    color: white;\n`;\n\nconst ListElem = styled.li`\n    list-style: none;\n`;\n\nconst Link = styled.a`\n    color: white;\n`;\n\nconst Header = () => {\n    return (\n        <StyledHeader>\n           \n            <ListElem>Coronavirus (COVID-19) Map</ListElem>\n            <ListElem><Link href=\"https://github.com/maknetaRo/covid-map\">github</Link></ListElem>\n            \n            \n        </StyledHeader>\n    )\n}\n\nexport default Header\n","import React from 'react'\nimport styled from 'styled-components'\n\nexport const StyledGridSection = styled.section`\n    padding: 3rem;\n    display: grid;\n    grid-template-columns: repeat(3, 1fr);\n    grid-template-rows: repeat()(2, 1fr);\n    width: 100%;\n    height: auto;\n    background-color: white;\n    color: black;\n    grid-gap: 24px;\n`;\n\nexport  const StyledGridElem = styled.article`\n    padding: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    align-items: center; \n    border: 1px solid #dadce0;\n`;\n\n\n","import React from 'react'\n\nconst CountryList = (props) => {\n \n    return (\n        <ul>\n       {props.countries ? props.countries.features.map(place => {\n            const { coordinates } = place.geometry        \n            const { country, cases, deaths, recovered, todayCases, todayDeaths, todayRecovered, updated } = place.properties;\n            let date = new Date(updated)\n            return (\n                <li key={country}>{country} | {cases} |  {deaths} |  {recovered} </li>\n            )\n        })\n    : null} \n            \n        </ul>\n    )\n}\n\nexport default CountryList\n","import { useState, useEffect } from 'react';\n\nconst useFetch = (urls) => {\n    const [countries, setCountries] = useState(null);\n    const [global, setGlobal] = useState(null);\n    const [dataHistorical, setDataHistorical] = useState(null)\n    const [dataVaccine, setDataVaccine] = useState(null)\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n    \n\n    useEffect(() => {\n        const fetchData = async () => {\n            const links = urls\n            console.log(links)\n            setLoading(true);\n            try {\n                const res = await Promise.all(links.map((url) => fetch(url)))\n                const data = await Promise.all(res.map((r) => r.json()))\n\n                const geoJson = {\n                    type: \"FeatureCollection\",\n                    features: data[0].map((country = {}) => {\n                        const { countryInfo = {}} = country;\n                        const { lat, long: lng} = countryInfo;\n                        return {\n                            type: \"Feature\",\n                            properties: {\n                                ...country,\n                            },\n                            geometry: {\n                                type: \"Point\",\n                                coordinates: [lat, lng]\n                            }\n                        }\n                    })\n                }\n                setCountries(geoJson)\n                setGlobal(data[1])\n                // setDataHistorical(data[2])\n                // setDataVaccine(data[3])\n                setLoading(false)\n            } catch (error) {\n                console.log(`Failed to fetch data: ${error.message}`, error)\n                setError(error)\n            }\n       \n      \n        }\n        fetchData()\n    }, [])\n\n\n    return { countries, global, dataHistorical, dataVaccine, loading, error}\n}\n\nexport default useFetch","import './App.css';\nimport Map from './components/Map'\nimport DataAll from './components/DataAll'\nimport Header from './components/Header'\nimport CountryList from './components/CountryList'\n\nimport useFetch from './useFetch'\n\n\nfunction App() {\n\n  const urls = [\n    'https://disease.sh/v3/covid-19/countries',\n    'https://disease.sh/v3/covid-19/all',\n    'https://disease.sh/v3/covid-19/historical?lastdays=30',\n    'https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=30'\n  ]\n\nconst { countries, global, dataHistorical, dataVaccine, loading, error } = useFetch(urls)\n\n     \nif (error) return <p>Error!</p>;\n\n  return (\n    <div className=\"App\">\n    <Header />\n    {loading ? <p>Loading ...</p> :  <Map countries={countries} /> }\n   \n    {/*{loading ? <p>Loading ...</p> : <DataAll global={global} /> }*/} \n    {loading ? null : <CountryList countries={countries} /> }\n   \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}